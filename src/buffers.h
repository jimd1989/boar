#pragma once

#include <stdint.h>
#include <stdlib.h>

#include "audio-settings.h"

typedef struct Buffer {

/* An audio buffer for internal mixing and synthesis. */

  size_t        Size;
  float       * Values;
} Buffer;

typedef struct ByteBuffer {

/* An audio buffer for output of mixed and interleaved sound data. */

  unsigned int          Chan;
  size_t                ChanBytes;
  size_t                Size;
  uint8_t             * Values;
} ByteBuffer;

typedef struct BufferX {

  /* IN INIT, do NOT multiply size of Mix by channels. Only for output. */

/* Two buffers: Mix is always DEFAULT_BUFSIZE frames long, and holds floating 
 * point sample data. This is for mixing synthesis data generated by each of the 
 * voices. It is kept short to respond effectively to user input. Output is
 * also ideally DEFAULT_BUFSIZE frames in length, but may not be due to hardware
 * limitations. Output holds raw bytes to write to sndio. If Output is longer
 * than Mix, then Mix will be filled multiple times before Output writes its
 * data. The lengths of these buffers do not have to be perfect multiples of one
 * another. The internal synthesis data is fundamentally monophonic, but if 
 * multichannel output is specified, then one sample of Mix will be written
 * multiple times to Output, potentially at different final amplitudes. With
 * this in mind, the Output buffer needs to track various sizing variables:
 * number of channels, number of frames, number of bytes, while Mix is only
 * manipulated in terms of frames. */

  float         * Mix;
  uint8_t       * Output;
} BufferX;

Buffer * makeBuffer(const size_t);
ByteBuffer * makeByteBuffer(const AudioSettings *);
void killBuffer(Buffer *);
void killByteBuffer(ByteBuffer *);
